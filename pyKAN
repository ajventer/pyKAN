#!/usr/bin/env python3
from libPyKAN import ckanRepo,pykancfg,util,filters
from libPyKAN.version import Version
from libPyKAN.installed import Installed
from libPyKAN.modmanager import ModManager,MultiProviderException,MissingDependencyException,ConfirmException
import argparse
from argparse import RawTextHelpFormatter
import sys
import json
if sys.version_info < (2, 7, 9):
    print("WARNING ! Many upstream download servers required SNI verification.")
    print("Python does not support this in versions earlier than 2.7.9.")
    print("You will be unable to install mods hosted on these servers")



def select_menu(msg, options):
    valid_answer = False
    while not valid_answer:
        print()
        print(msg)
        for i in options:
            print('\t%s: %s' %(options.index(i),i))
        answer = input('Choice:')
        valid_answer = answer.isdigit() and int(answer) >= 0 and int(answer) < len(options)
        if not valid_answer:
            valid_answer = answer in options
        if answer.isdigit():
            answer = int(answer)
        else:
            answer = answer in options and options.index(answer) or None
        if not valid_answer:
            print("\nError. Invalid choice. Please try again")
    return answer

def confirm(msg='Continue [y/n]'):
    answer = input("Continue [y/n]")
    return answer.lower().startswith('y')



if __name__ == '__main__':
    def show_settings(_):
        if options.allsettings:
            print(settings.view_all())
        else:
            print(settings)

    def change_setting(_):
        if options.key == None or options.value == None:
            util.error("changesetting requires --key and --value options")
        key = options.key
        if not key in settings.flatsettings():
            foundkey = False
            for k in list(settings.flatsettings().keys()):
                if k.lower() == key.lower():
                    foundkey = True
                    key = k
                    break
            if not foundkey:
                raise KeyError('Key %s does not exist' % key)
        util.debug('Updating %s=%s' % (key,options.value))
        value = options.value
        if value.isdigit():
            value = int(value)
        elif isinstance(value,str) and value.lower() in ['true', 'false']:
            value = value.lower() == 'true' and True or False
        settings.set(key,value)
        print("Updated settings:", settings)
        settings.save()

    def listkspdirs(_):
        c = 0
        for i in settings['KSPDIRS']:
            print('%s: %s' %(c, i))
            c += 1

    def addkspdir(_):
        if not options.kspdir:
            util.error('You must specify --kspdir with a string path when adding a new KSP directory')
        settings.addkspdir(kspdir)
        listkspdirs('_')

    def delkspdir(_):
        if not options.kspdir:
            util.error('You must specify --kspdir when removing a KSP directory')
        settings.delkspdir(kspdir)
        listkspdirs('_')

    def defaultksp(_):
        if not options.kspdir:
            util.error('You must specify --kspdir to change the default KSP directory ')
        settings.setdefaultksp(kspdir)
        listkspdirs('_')

    def list_repos(_):
        if not settings.KSPDIR:
            util.error('You must set up a KSP directory before you can manage repositories')
        c = 0
        repolist = repo.available_repo_list()
        for i in repolist:
            print('%s: [%s] %s (%s)' %(c,
                i['uri'] in settings['Repos'] and '*' or ' ',
                i['uri'],
                i['x_comment']))
            c += 1

    def add_repo(_):
        if not options.repo:
            util.error('You must give a repository index (from list_repos output) to add a repository')
        if options.repo < 0 or options.repo >= len(repo.available_repo_list()):
            util.error('Invalid repository index %s' % options.repo)
        settings.repos().append(repo.available_repo_list()[options.repo]['uri'])
        settings.KSPSettings['Repos'] = list(set(settings.repos()))
        settings.save()
        list_repos('_')

    def del_repo(_):
        if options.repo == 0:
            util.error('Error: you cannot deactivate the default repository.')
        if not options.repo:
            util.error('You must give a repository index (from list_repos output) to remove a repository')
        if options.repo < 0 or options.repo >= len(repo.available_repo_list()):
            util.error('Invalid repository index %s' % options.repo)
        uri = repo.available_repo_list()[options.repo]['uri']
        del(settings.repos()[settings.repos().index(uri)])
        settings.save()
        list_repos('_')

    def update(_):
        repo.update_repository_data()
        print('Repository updated. %s modules in repo' %(len(list(repo.repodata.keys()))))

    def list_modules(_):
        f = filters.Filter(settings)
        filtermethods = [f.compatible]
        filterargs = {}
        result = {}
        if options.upgradeable:
            upgradeable()
            return
        if options.installed:
            for i in sorted(INSTALLED.list_modules(), key=lambda k: k['identifier']):
                print('%s :  %s | %s (%s)' %(i['identifier'], i['name'], i['version'], i['status']))
            return
        if options.allmods:
            filtermethods = []
        if options.search:
            filtermethods.append(f.regex)
            filterargs['needle'] = options.search
        if options.modversion:
            filtermethods.append(f.by_mod_version)
            filterargs['compareversion']= options.modversion
        if options.kspversion:
            filtermethods.append(f.for_ksp_version)
            filterargs['kspversion'] = options.kspversion
        for i in repo.list_modules(filtermethods, filterargs):
            if options.allversions:
                print("%s :  %s | version: %s (%s)" %(i['identifier'],i.get('name',i),i.get('version'),INSTALLED.modstatus(i.get('name',i))))
            else:
                name = i.get('name','')
                version = i.get('version','')
                modid = i['identifier']
                if modid not in result or Version(result[modid]['version']) < Version(version):
                    result[modid] = {'name': name, 'version': version}
        if result:
            for i in sorted(result):
                print("%s :  %s | %s (%s)" %(i,result[i]['name'], result[i]['version'], INSTALLED.modstatus(i)))

    def show_module(_):
        if not options.module:
            util.error('Must specify --module with show')
        for mod_opt in options.module:
            for mod in list(repo.find_latest(mod_opt).values()):
                print(json.dumps(mod, indent=8))

    def install_mod(_):

        done = False
        blacklist = []
        if not options.module:
            util.error('Must specify --module with install')
        downloadlist = []
        mods = []
        if len(options.module) > 1 and options.version:
            util.error('Using --version with multiple mods is unsupported')
        for mod_opt in options.module:
            mod = repo.find_latest(mod_opt)
            if len(mod) > 1:
                dispstr = 'Multiple mods match search term ' + mod_opt + ' , please select one'
                answer = select_menu(dispstr, list(mod.keys()))
                mods += [mod[list(mod.keys())[answer]]]
            else:
                try:
                    modid = list(mod.keys())[0]
                except IndexError:
                    util.error('Could not find mod %s' % mod_opt)
                mods += [mod[modid]]
        while not done:
            done = True
            try:
                MM = ModManager(mods, settings,repo)
                downloadlist += MM.get_download_list(options.recommends,options.suggests, blacklist)
            except Exception as e:
                if isinstance(e,MultiProviderException):
                    modlist = str(e).split(',')
                    answer = select_menu('Multiple mods provide a required download, please select one', modlist)
                    choice = modlist[answer]
                    for m in list(repo.find_latest(choice).values()):
                        mods.append(m)
                    done = False
                elif isinstance(e,MissingDependencyException):
                    print()
                    util.error(str(e))
                elif isinstance(e,ConfirmException):
                    print()
                    done = False
                    owningmod,verb,modlist = str(e).split(':')
                    modlist = modlist.split(',')
                    print('%s %s:\n\t%s' %(owningmod,verb,'\n\t'.join(modlist)))
                    answer = input('Install these mods [y/n]')
                    if answer.lower().startswith('y'):
                        for m in modlist:
                            for mm in list(repo.find_latest(m).values()):
                                mods.append(mm)
                    else:
                        blacklist += modlist
                else:
                    raise
        print("About to install:\n\t%s" %('\n\t'.join(downloadlist)))
        if not confirm():
            sys.exit()
        print("Downloading module%s" %(len(downloadlist) > 1 and 's' or ''))
        modfiles = MM.download()
        util.debug(modfiles)
        print("Installing modules")
        MM.install()

    def uninstall_mod(_):
        mod = []
        if not options.module:
            util.error('Must specify --module with uninstall')
        for mod_opt in options.module:
            if not mod_opt in INSTALLED.all_modnames():
                util.error('Cannot uninstall %s as it is not installed' %mod_opt)
            mod += [INSTALLED[mod_opt]]
        MM = ModManager(mod, settings,repo)
        remlist = MM.uninstall_list()
        print("About to remove: \n\t%s" %('\n\t'.join(remlist)))
        if not confirm():
            sys.exit()
        for mod in remlist:
            print("Uninstalling %s" % mod)
            MM.remove(mod)

    def upgradeable():
        mods = list(INSTALLED.all_modnames())
        upgradeables = []
        for mod in mods:
            m = repo.find_latest(mod)
            util.debug(m)
            m = mod in m and m[mod] or m
            if not m:
                continue
            v1 = Version(m.get('version','0.0.0.0.0.0.0.0.0'))
            v2 = Version(INSTALLED[mod].get('version','0.0.0.0.0.0.0.0.0'))
            if v1 > v2:
                upgradeables.append((mod,v1,v2))
        up =[]
        print ("Mods that can be upgraded: \n"  )
        for u in upgradeables:
            if not u in up:
                up.append(u)
            print ('\t%s %s -> %s' %(u[0],u[2],u[1]))
        return [i[0] for i in up]

    def upgrade(_):
        uplist = []
        for i  in upgradeable():
            for k,v in repo.find_latest(i).items():
                uplist.append(v)
        if not confirm():
            sys.exit()
        MM = ModManager(uplist, settings,repo)
        MM.upgrade()

        print("Modules upgraded")



    parser = argparse.ArgumentParser(description = 'Python client for CKAN data',formatter_class=RawTextHelpFormatter)
    parser.add_argument('--kspdir',type=str,default=None,action='store',help='The KSP directory to work with. Can be a full path or an index from the list.')
    parser.add_argument('--debug',action='store_true',help='Print (a great deal off) verbose debug messages to stderr')
    parser.add_argument('--allsettings',action='store_true',help='Option to showsettings to show all settings, not just the ones that can be directly edited with change_setting')
    parser.add_argument('--allmods',action='store_true',help="Show the module list without any filters. Use with list_modules.")
    parser.add_argument('--search',type=str,default=None,help="Search for module by regular expression. Use with list_modules.")
    parser.add_argument('--allversions',action='store_true',help="Show the all versions of mods. Default is to only show the highest version. Use with list_modules.")
    parser.add_argument('--installed',action='store_true',help="Show only installed modules. Use with list_modules.")
    parser.add_argument('--upgradeable',action='store_true',help="Show installed mods with upgrades available. Use with list_modules.")
    parser.add_argument('--modversion',type=str,default=None,help='Search for specific mod versions. Use with list_modules.')
    parser.add_argument('--kspversion',type=str,default=None,help='Search for mods for a different KSP version. Use with list_modules.')
    parser.add_argument('--version',type=str,default=None,help='Version of the module. Use with install. Optional: default to latest compatible version.')
    parser.add_argument('--recommends',type=str,default='ask',choices=['ask','yes','no'],help='What to do with recommended mods. Default: ask.')
    parser.add_argument('--suggests',type=str,default='no',choices=['ask','yes','no'],help='What to do with suggested mods. Default: no (do not install).')
    parser.add_argument('--nobar',action='store_true',help='Disables download progress bar')


    #Positional sub arguments

    subparsers = parser.add_subparsers()

    parser_install = subparsers.add_parser('install', help='Installs a module')
    parser_install.add_argument('module', type=str, help='Module to be installed', nargs='+')
    parser_install.set_defaults(func=install_mod)

    parser_uninstall = subparsers.add_parser('uninstall', help='Uninstalls a module')
    parser_uninstall.add_argument('module', type=str, help='Module to be uninstalled', nargs='+')
    parser_uninstall.set_defaults(func=uninstall_mod)

    parser_addkspdir = subparsers.add_parser('addkspdir', help='Adds KSP directory to the configuration')
    parser_addkspdir.add_argument('kspdir', type=str, help='Path to KSP directory')
    parser_addkspdir.set_defaults(func=addkspdir)

    parser_update = subparsers.add_parser('update', help='Updates repo')
    parser_update.set_defaults(func=update)

    parser_delkspdir = subparsers.add_parser('delkspdir', help='Deletes KSP directory from the configuration')
    parser_delkspdir.add_argument('kspdir', type=str, help='Path to KSP directory')
    parser_delkspdir.set_defaults(func=delkspdir)

    parser_addrepo = subparsers.add_parser('add_repo', help='Activate another repository for upstream sources')
    parser_addrepo.add_argument('repo', type=str, help='The repo index or uri')
    parser_addrepo.set_defaults(func=add_repo)

    parser_delrepo = subparsers.add_parser('del_repo', help='Deletes a repository')
    parser_delrepo.set_defaults(func=del_repo)
    parser_delrepo.add_argument('repo', type=str, help='The repo index or uri')

    parser_listrepo = subparsers.add_parser('list_repos', help='List added repository')
    parser_listrepo.set_defaults(func=list_repos)

    parser_upgrade = subparsers.add_parser('upgrade', help='Upgrades selected mods. If empty, upgrade all installed mods')
    parser_upgrade.set_defaults(func=upgrade)
    parser_upgrade.add_argument('module', type=str, help='Mods to be upgraded', nargs='*')

    parser_listkspdirs = subparsers.add_parser('listkspdirs', help='List KSP directories we manage')
    parser_listkspdirs.set_defaults(func=listkspdirs)

    parser_show = subparsers.add_parser('show', help='Show module full details')
    parser_show.add_argument('module', type=str, help='Show full details on a particular module', nargs='+')
    parser_show.set_defaults(func=show_module)

    parser_defaultksp = subparsers.add_parser('default_ksp', help='Set default KSP directory for installation')
    parser_defaultksp.add_argument('kspdir', type=str, help='Path to KSP directory')
    parser_defaultksp.set_defaults(func=defaultksp)

    parser_showsetting = subparsers.add_parser('show_settings', help='Show editable settings and their values')
    parser_showsetting.set_defaults(func=show_settings)

    parser_changesetting = subparsers.add_parser('change_setting', help='Show module full details')
    parser_changesetting.add_argument('key', type=str, help='The key to change the value off')
    parser_changesetting.add_argument('value', type=str, help='The new value to set for key')
    parser_changesetting.set_defaults(func=change_setting)

    parser_listmodules = subparsers.add_parser('list_modules', help='List available modules')#TODO: Split list_modules to search and list_modules
    parser_listmodules.set_defaults(func=list_modules)

    parser_searchmod = subparsers.add_parser('search', help='Search available modules')
    parser_searchmod.add_argument('search', type=str, help='Search for module by regular expression')
    parser_searchmod.set_defaults(func=list_modules)

    parser.epilog = '%s\nMost list selections can use the numeric index or the text\n%s' %(parser.epilog,
        'Examples:\n%s add_repo --repo 1\n%s add_repo https://github.com/KSP-CKAN/CKAN-meta-dev/archive/RemoteTech-pre.tar.gz ' %(sys.argv[0],sys.argv[0]))

    options = parser.parse_args(sys.argv[1:])
    util.DEBUG=options.debug
    util.NOBAR = options.nobar
    if isinstance(options.kspdir, str) and not options.kspdir.isdigit():
        kspdir = options.kspdir
    else:
        kspdir = None

    util.debug('KSP Directory: %s'% kspdir)

    settings = pykancfg.PyKANSettings(kspdir)

    if isinstance(options.kspdir,str) and (kspdir == None) and options.kspdir.isdigit():
        kspdir = settings['KSPDIRS'][int(options.kspdir)]
        settings = pykancfg.PyKANSettings(kspdir)
        util.debug('Settings.KSPDIR: %s' %settings.KSPDIR)

    if isinstance(kspdir,str) and not util.is_kspdir(kspdir):
        util.error('%s Does not appear to be a valid KSP installation' % kspdir)

    if settings.KSPDIR:
        repo = ckanRepo.CkanRepo(settings)
        INSTALLED = Installed(settings,repo)
        settings.reload()
        print("Using KSP Directory: ",settings.KSPDIR)

    if hasattr(options, 'func'):
        options.func(options)
    else:
        parser.print_usage()

